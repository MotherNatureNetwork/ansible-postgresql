---

- name: install required SSL certs
  apt:
    pkg:
      - apt-transport-https
      - ca-certificates

- name: Get PostgreSQL apt repo key.
  apt_key: url=https://www.postgresql.org/media/keys/ACCC4CF8.asc
           id=ACCC4CF8
           state=present

- name: Add PostgreSQL apt repo.
  apt_repository: repo='deb http://apt.postgresql.org/pub/repos/apt/
                  {{ postgresql_distro_version }}-pgdg main'
                  state=present

- name: Install PostgreSQL.
  apt:
    pkg:
      - postgresql-{{ postgresql_version }}
      - postgresql-server-dev-{{ postgresql_version }}
      - python-dev
      - python-psycopg2
    update_cache: true
  notify: reload postgresql

- name: Configure Postgres
  copy: src={{ item }}
        dest=/etc/postgresql/{{ postgresql_version }}/main/
        mode=0644
  with_items:
    - pg_hba.conf
  notify: reload postgresql

- name: Listen as any address
  lineinfile: 
    path: /etc/postgresql/{{ postgresql_version }}/main/postgresql.conf
    regexp: '^#?listen_addresses\s*='
    line: "listen_addresses = '*'"
    state: present
  notify: restart postgresql

- name: force all notified handlers
  meta: flush_handlers

- name: Start and Enable Postgresql service
  systemd: name=postgresql state=started enabled=yes
  when: ansible_distribution_release == 'xenial'

- name: Create database
  postgresql_db: name={{ postgresql_database }}
                 state=present
                 login_unix_socket='/var/run/postgresql'
  register: postgres_db
  when: postgresql_database is defined

- name: Create db user
  postgresql_user: name={{ postgresql_user }}
                   role_attr_flags={{ postgresql_user_attrs | join(",") }}
                   login_unix_socket='/var/run/postgresql'
  when: postgresql_user is defined

- name: Restore DB
  become: false
  command: pg_restore -d {{ postgresql_database }} -U {{ postgresql_user }}
           -n public {{ postgresql_dump }}
  when: postgres_db.changed == true and postgresql_dump is defined
  tags:
    - skip_ansible_lint
